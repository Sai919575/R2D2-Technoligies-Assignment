# A web application where an user can search for a movie name and see information like movie name, rating , Votes etc.

import urllib.request, urllib.parse, urllib.error
import json

conda install psycopg2


<html>
<head>
<style>
* {
  box-sizing: border-box;
}

.column {
  float: left;
  width: 23.33%;
  padding: 2px;
}


.row::after {
  content: "";
  clear: both;
  display: table;
}
</style>
    
</head>
<body>
    <p><b><h1>Most Viewed Movies</h1></b></p>
<div class="row">
  <div class="column">
    <img src="lpq.jpg"  style="width:20%">
  </div>
  <div class="column">
    <img src="abc.jpg"  style="width:20%">
  </div>
  <div class="column">
    <img src="pls.jpg" style="width:20%">
  </div>
</div>

</body>
</html>


# Get Secret API key from OMDB website and use that, 1000 daily limit from a JSON file, stored in the same folder

with open('DFG.json') as f:
    keys = json.load(f)
    omdbapi = keys[0]['OMDBapi']
    
    
    
serviceurl = 'http://www.omdbapi.com/?'
apikey = '&apikey='+omdbapi


!pip install psycopg2


# Function for printing a JSON dataset

def print_json(json_data):
    list_keys=['Title', 'Year', 'Rated', 'Released', 'Runtime', 'Genre', 'Director', 'Writer', 
               'Actors', 'Plot', 'Language', 'Country', 'Awards', 'Ratings', 
               'Metascore', 'imdbRating', 'imdbVotes', 'imdbID']
    print("-"*50)
    for k in list_keys:
        if k in list(json_data.keys()):
            print(f"{k}: {json_data[k]}")
    print("-"*50)
    
# Function to create/update the local movie database with the data retreived from the web Saves the movie data
(Title, Year, Runtime, Country, Metascore, and IMDB rating)
into a local SQLite database called 'movieinfo.sqlite    


 def save_in_database(json_data):
    
    filename = input("Please enter a name for the database (extension not needed, it will be added automatically): ")
    filename = filename+'.sqlite'
    import psycopg2 as pg
    import sqlite3
    conn = sqlite3.connect(str(filename))
    cur=conn.cursor()
    
    title = json_data['Title']
    
    if json_data['Year']!='N/A':
        year = int(json_data['Year'])
    if json_data['Runtime']!='N/A':
        runtime = int(json_data['Runtime'].split()[0])
    if json_data['Country']!='N/A':
        country = json_data['Country']
    if json_data['Metascore']!='N/A':
        metascore = float(json_data['Metascore'])
    else:
        metascore=-1
    if json_data['imdbRating']!='N/A':
        imdb_rating = float(json_data['imdbRating'])
    else:
        imdb_rating=-1
    

    cur.execute('''CREATE TABLE  IF NOT EXISTS MovieInformation 
    (Title TEXT, Year INTEGER, Runtime INTEGER, Country TEXT, Metascore REAL, IMDBRating REAL)''')
    
    cur.execute('SELECT Title FROM MovieInformation WHERE Title = ? ', (title,))
    row = cur.fetchone()
    
    if row is None:
        cur.execute('''INSERT INTO MovieInformation (Title, Year, Runtime, Country, Metascore, IMDBRating)
                VALUES (?,?,?,?,?,?)''', (title,year,runtime,country,metascore,imdb_rating))
    else:
        print("Record already found. No update made.")
        
     
    conn.commit()
    conn.close()
    
    
# Function to print contents of the local database
    
def print_database(database):
    
    import sqlite3
    conn = sqlite3.connect(str(database))
    cur=conn.cursor()
    
    for row in cur.execute('SELECT * FROM MovieInformation'):
        print(row)
    conn.close()
    
# Function to save the database content in an Excel file

def save_in_excel(filename, database):
    
    if filename.split('.')[-1]!='xls' and filename.split('.')[-1]!='xlsx':
        print ("Filename does not have correct extension. Please try again")
        return None
    
    import pandas as pd
    import sqlite3
    import psycopg2 as pg
    conn = sqlite3.connect(str(database))
    
    df=pd.read_sql_query("SELECT * FROM MovieInformation", conn)
    conn.close()
    
    df.to_excel(filename,sheet_name='Movie Information')
    
<html><h1>Function to search for information about a movie</h1></html>

def search_movie(title):
    if len(title) < 1 or title=='quit': 
        print("Goodbye now...")
        return None

    try:
        url = serviceurl + urllib.parse.urlencode({'t': title})+apikey
        print(f'Retrieving the data of "{title}" now... ')
        uh = urllib.request.urlopen(url)
        data = uh.read()
        json_data=json.loads(data)
        
        if json_data['Response']=='True':
            print_json(json_data)
            # If you want to save the movie information in a local database then type yes otherwise no
            save_database_yes_no=input ('To Save the movie info in a local database? Enter "yes" or "no": ').lower()
            if save_database_yes_no=='yes':
                save_in_database(json_data)
        else:
            print("Error encountered: ",json_data['Error'])
    
    except urllib.error.URLError as e:
        print(f"ERROR: {e.reason}")
        
        
        
        
title = input('\nEnter the name of a movie (enter \'quit\' or hit ENTER to quit): ')
if len(title) < 1 or title=='quit': 
    print("Ended...")
else:
    search_movie(title)
    
    
    
print_database('movies.sqlite')



save_in_excel('test.xlsx','movies.sqlite')


import pandas as pd
df=pd.read_excel('test.xlsx')
df

